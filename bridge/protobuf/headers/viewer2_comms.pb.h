// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: viewer2_comms.proto

#ifndef PROTOBUF_viewer2_5fcomms_2eproto__INCLUDED
#define PROTOBUF_viewer2_5fcomms_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#include "ignition/msgs/time.pb.h"
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_viewer2_5fcomms_2eproto();
void protobuf_AssignDesc_viewer2_5fcomms_2eproto();
void protobuf_ShutdownFile_viewer2_5fcomms_2eproto();

class Viewer2Comms;

// ===================================================================

class Viewer2Comms : public ::google::protobuf::Message {
 public:
  Viewer2Comms();
  virtual ~Viewer2Comms();

  Viewer2Comms(const Viewer2Comms& from);

  inline Viewer2Comms& operator=(const Viewer2Comms& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Viewer2Comms& default_instance();

  void Swap(Viewer2Comms* other);

  // implements Message ----------------------------------------------

  Viewer2Comms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Viewer2Comms& from);
  void MergeFrom(const Viewer2Comms& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ignition::msgs::Header& header() const;
  inline ::ignition::msgs::Header* mutable_header();
  inline ::ignition::msgs::Header* release_header();
  inline void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.Time time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::ignition::msgs::Time& time() const;
  inline ::ignition::msgs::Time* mutable_time();
  inline ::ignition::msgs::Time* release_time();
  inline void set_allocated_time(::ignition::msgs::Time* time);

  // optional string format = 3;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 3;
  inline const ::std::string& format() const;
  inline void set_format(const ::std::string& value);
  inline void set_format(const char* value);
  inline void set_format(const char* value, size_t size);
  inline ::std::string* mutable_format();
  inline ::std::string* release_format();
  inline void set_allocated_format(::std::string* format);

  // optional int32 format_version_major = 4;
  inline bool has_format_version_major() const;
  inline void clear_format_version_major();
  static const int kFormatVersionMajorFieldNumber = 4;
  inline ::google::protobuf::int32 format_version_major() const;
  inline void set_format_version_major(::google::protobuf::int32 value);

  // optional int32 format_version_minor = 5;
  inline bool has_format_version_minor() const;
  inline void clear_format_version_minor();
  static const int kFormatVersionMinorFieldNumber = 5;
  inline ::google::protobuf::int32 format_version_minor() const;
  inline void set_format_version_minor(::google::protobuf::int32 value);

  // optional bytes data = 7;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Viewer2Comms)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_format_version_major();
  inline void clear_has_format_version_major();
  inline void set_has_format_version_minor();
  inline void clear_has_format_version_minor();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::ignition::msgs::Time* time_;
  ::std::string* format_;
  ::google::protobuf::int32 format_version_major_;
  ::google::protobuf::int32 format_version_minor_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_viewer2_5fcomms_2eproto();
  friend void protobuf_AssignDesc_viewer2_5fcomms_2eproto();
  friend void protobuf_ShutdownFile_viewer2_5fcomms_2eproto();

  void InitAsDefaultInstance();
  static Viewer2Comms* default_instance_;
};
// ===================================================================


// ===================================================================

// Viewer2Comms

// optional .ignition.msgs.Header header = 1;
inline bool Viewer2Comms::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Viewer2Comms::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Viewer2Comms::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Viewer2Comms::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& Viewer2Comms::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Viewer2Comms.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* Viewer2Comms::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ignition::msgs::Header;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Viewer2Comms.header)
  return header_;
}
inline ::ignition::msgs::Header* Viewer2Comms::release_header() {
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Viewer2Comms::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Viewer2Comms.header)
}

// optional .ignition.msgs.Time time = 2;
inline bool Viewer2Comms::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Viewer2Comms::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Viewer2Comms::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Viewer2Comms::clear_time() {
  if (time_ != NULL) time_->::ignition::msgs::Time::Clear();
  clear_has_time();
}
inline const ::ignition::msgs::Time& Viewer2Comms::time() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Viewer2Comms.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::ignition::msgs::Time* Viewer2Comms::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::ignition::msgs::Time;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Viewer2Comms.time)
  return time_;
}
inline ::ignition::msgs::Time* Viewer2Comms::release_time() {
  clear_has_time();
  ::ignition::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void Viewer2Comms::set_allocated_time(::ignition::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Viewer2Comms.time)
}

// optional string format = 3;
inline bool Viewer2Comms::has_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Viewer2Comms::set_has_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Viewer2Comms::clear_has_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Viewer2Comms::clear_format() {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_->clear();
  }
  clear_has_format();
}
inline const ::std::string& Viewer2Comms::format() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Viewer2Comms.format)
  return *format_;
}
inline void Viewer2Comms::set_format(const ::std::string& value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Viewer2Comms.format)
}
inline void Viewer2Comms::set_format(const char* value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Viewer2Comms.format)
}
inline void Viewer2Comms::set_format(const char* value, size_t size) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Viewer2Comms.format)
}
inline ::std::string* Viewer2Comms::mutable_format() {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Viewer2Comms.format)
  return format_;
}
inline ::std::string* Viewer2Comms::release_format() {
  clear_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = format_;
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Viewer2Comms::set_allocated_format(::std::string* format) {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (format) {
    set_has_format();
    format_ = format;
  } else {
    clear_has_format();
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Viewer2Comms.format)
}

// optional int32 format_version_major = 4;
inline bool Viewer2Comms::has_format_version_major() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Viewer2Comms::set_has_format_version_major() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Viewer2Comms::clear_has_format_version_major() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Viewer2Comms::clear_format_version_major() {
  format_version_major_ = 0;
  clear_has_format_version_major();
}
inline ::google::protobuf::int32 Viewer2Comms::format_version_major() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Viewer2Comms.format_version_major)
  return format_version_major_;
}
inline void Viewer2Comms::set_format_version_major(::google::protobuf::int32 value) {
  set_has_format_version_major();
  format_version_major_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Viewer2Comms.format_version_major)
}

// optional int32 format_version_minor = 5;
inline bool Viewer2Comms::has_format_version_minor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Viewer2Comms::set_has_format_version_minor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Viewer2Comms::clear_has_format_version_minor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Viewer2Comms::clear_format_version_minor() {
  format_version_minor_ = 0;
  clear_has_format_version_minor();
}
inline ::google::protobuf::int32 Viewer2Comms::format_version_minor() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Viewer2Comms.format_version_minor)
  return format_version_minor_;
}
inline void Viewer2Comms::set_format_version_minor(::google::protobuf::int32 value) {
  set_has_format_version_minor();
  format_version_minor_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Viewer2Comms.format_version_minor)
}

// optional bytes data = 7;
inline bool Viewer2Comms::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Viewer2Comms::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Viewer2Comms::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Viewer2Comms::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Viewer2Comms::data() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Viewer2Comms.data)
  return *data_;
}
inline void Viewer2Comms::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Viewer2Comms.data)
}
inline void Viewer2Comms::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Viewer2Comms.data)
}
inline void Viewer2Comms::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Viewer2Comms.data)
}
inline ::std::string* Viewer2Comms::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Viewer2Comms.data)
  return data_;
}
inline ::std::string* Viewer2Comms::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Viewer2Comms::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Viewer2Comms.data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_viewer2_5fcomms_2eproto__INCLUDED
