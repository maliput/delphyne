// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: viewer_command.proto

#ifndef PROTOBUF_viewer_5fcommand_2eproto__INCLUDED
#define PROTOBUF_viewer_5fcommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_viewer_5fcommand_2eproto();
void protobuf_AssignDesc_viewer_5fcommand_2eproto();
void protobuf_ShutdownFile_viewer_5fcommand_2eproto();

class ViewerCommand;

enum ViewerCommand_Type {
  ViewerCommand_Type_STATUS = 0,
  ViewerCommand_Type_LOAD_MODEL = 1,
  ViewerCommand_Type_LOAD_RENDERER = 2,
  ViewerCommand_Type_SHUTDOWN = 3,
  ViewerCommand_Type_START_RECORDING = 4,
  ViewerCommand_Type_STOP_RECORDING = 5,
  ViewerCommand_Type_LOAD_TERRAIN = 6,
  ViewerCommand_Type_SET_TERRAIN_TRANSFORM = 7
};
bool ViewerCommand_Type_IsValid(int value);
const ViewerCommand_Type ViewerCommand_Type_Type_MIN = ViewerCommand_Type_STATUS;
const ViewerCommand_Type ViewerCommand_Type_Type_MAX = ViewerCommand_Type_SET_TERRAIN_TRANSFORM;
const int ViewerCommand_Type_Type_ARRAYSIZE = ViewerCommand_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ViewerCommand_Type_descriptor();
inline const ::std::string& ViewerCommand_Type_Name(ViewerCommand_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ViewerCommand_Type_descriptor(), value);
}
inline bool ViewerCommand_Type_Parse(
    const ::std::string& name, ViewerCommand_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ViewerCommand_Type>(
    ViewerCommand_Type_descriptor(), name, value);
}
// ===================================================================

class ViewerCommand : public ::google::protobuf::Message {
 public:
  ViewerCommand();
  virtual ~ViewerCommand();

  ViewerCommand(const ViewerCommand& from);

  inline ViewerCommand& operator=(const ViewerCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewerCommand& default_instance();

  void Swap(ViewerCommand* other);

  // implements Message ----------------------------------------------

  ViewerCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ViewerCommand& from);
  void MergeFrom(const ViewerCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ViewerCommand_Type Type;
  static const Type STATUS = ViewerCommand_Type_STATUS;
  static const Type LOAD_MODEL = ViewerCommand_Type_LOAD_MODEL;
  static const Type LOAD_RENDERER = ViewerCommand_Type_LOAD_RENDERER;
  static const Type SHUTDOWN = ViewerCommand_Type_SHUTDOWN;
  static const Type START_RECORDING = ViewerCommand_Type_START_RECORDING;
  static const Type STOP_RECORDING = ViewerCommand_Type_STOP_RECORDING;
  static const Type LOAD_TERRAIN = ViewerCommand_Type_LOAD_TERRAIN;
  static const Type SET_TERRAIN_TRANSFORM = ViewerCommand_Type_SET_TERRAIN_TRANSFORM;
  static inline bool Type_IsValid(int value) {
    return ViewerCommand_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ViewerCommand_Type_Type_MIN;
  static const Type Type_MAX =
    ViewerCommand_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ViewerCommand_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ViewerCommand_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ViewerCommand_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ViewerCommand_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ignition::msgs::Header& header() const;
  inline ::ignition::msgs::Header* mutable_header();
  inline ::ignition::msgs::Header* release_header();
  inline void set_allocated_header(::ignition::msgs::Header* header);

  // optional int32 command_type = 2;
  inline bool has_command_type() const;
  inline void clear_command_type();
  static const int kCommandTypeFieldNumber = 2;
  inline ::google::protobuf::int32 command_type() const;
  inline void set_command_type(::google::protobuf::int32 value);

  // optional string command_data = 3;
  inline bool has_command_data() const;
  inline void clear_command_data();
  static const int kCommandDataFieldNumber = 3;
  inline const ::std::string& command_data() const;
  inline void set_command_data(const ::std::string& value);
  inline void set_command_data(const char* value);
  inline void set_command_data(const char* value, size_t size);
  inline ::std::string* mutable_command_data();
  inline ::std::string* release_command_data();
  inline void set_allocated_command_data(::std::string* command_data);

  // @@protoc_insertion_point(class_scope:ignition.msgs.ViewerCommand)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_command_type();
  inline void clear_has_command_type();
  inline void set_has_command_data();
  inline void clear_has_command_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::std::string* command_data_;
  ::google::protobuf::int32 command_type_;
  friend void  protobuf_AddDesc_viewer_5fcommand_2eproto();
  friend void protobuf_AssignDesc_viewer_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_viewer_5fcommand_2eproto();

  void InitAsDefaultInstance();
  static ViewerCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// ViewerCommand

// optional .ignition.msgs.Header header = 1;
inline bool ViewerCommand::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewerCommand::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewerCommand::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewerCommand::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& ViewerCommand::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.ViewerCommand.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* ViewerCommand::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ignition::msgs::Header;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.ViewerCommand.header)
  return header_;
}
inline ::ignition::msgs::Header* ViewerCommand::release_header() {
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ViewerCommand::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.ViewerCommand.header)
}

// optional int32 command_type = 2;
inline bool ViewerCommand::has_command_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ViewerCommand::set_has_command_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ViewerCommand::clear_has_command_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ViewerCommand::clear_command_type() {
  command_type_ = 0;
  clear_has_command_type();
}
inline ::google::protobuf::int32 ViewerCommand::command_type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.ViewerCommand.command_type)
  return command_type_;
}
inline void ViewerCommand::set_command_type(::google::protobuf::int32 value) {
  set_has_command_type();
  command_type_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.ViewerCommand.command_type)
}

// optional string command_data = 3;
inline bool ViewerCommand::has_command_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ViewerCommand::set_has_command_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ViewerCommand::clear_has_command_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ViewerCommand::clear_command_data() {
  if (command_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_data_->clear();
  }
  clear_has_command_data();
}
inline const ::std::string& ViewerCommand::command_data() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.ViewerCommand.command_data)
  return *command_data_;
}
inline void ViewerCommand::set_command_data(const ::std::string& value) {
  set_has_command_data();
  if (command_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_data_ = new ::std::string;
  }
  command_data_->assign(value);
  // @@protoc_insertion_point(field_set:ignition.msgs.ViewerCommand.command_data)
}
inline void ViewerCommand::set_command_data(const char* value) {
  set_has_command_data();
  if (command_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_data_ = new ::std::string;
  }
  command_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:ignition.msgs.ViewerCommand.command_data)
}
inline void ViewerCommand::set_command_data(const char* value, size_t size) {
  set_has_command_data();
  if (command_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_data_ = new ::std::string;
  }
  command_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.ViewerCommand.command_data)
}
inline ::std::string* ViewerCommand::mutable_command_data() {
  set_has_command_data();
  if (command_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.ViewerCommand.command_data)
  return command_data_;
}
inline ::std::string* ViewerCommand::release_command_data() {
  clear_has_command_data();
  if (command_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = command_data_;
    command_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ViewerCommand::set_allocated_command_data(::std::string* command_data) {
  if (command_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_data_;
  }
  if (command_data) {
    set_has_command_data();
    command_data_ = command_data;
  } else {
    clear_has_command_data();
    command_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.ViewerCommand.command_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ignition::msgs::ViewerCommand_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::ViewerCommand_Type>() {
  return ::ignition::msgs::ViewerCommand_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_viewer_5fcommand_2eproto__INCLUDED
