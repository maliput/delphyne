// Copyright 2020 Toyota Research Institute
//
// Note: This file has not autogenerated via the usual Drake codegen utilities, hence we only include
// those functions which are relevant to basic usage (e.g. specialized copy/move implementations,
// symbolic support, etc.).

#pragma once

#include <cmath>
#include <string>
#include <utility>
#include <vector>

#include <drake/systems/framework/basic_vector.h>
#include <maliput/common/maliput_never_destroyed.h>

namespace delphyne {

/// Specializes BasicVector with specific getters and setters.
template <typename T>
class AngularRateAccelerationCommand final : public drake::systems::BasicVector<T> {
 public:
  /// Default constructor.  Sets all rows to their default value:
  /// @arg @c angular_rate defaults to 0.0 rad/s.
  /// @arg @c acceleration defaults to 0.0 m/s^2.
  AngularRateAccelerationCommand() : drake::systems::BasicVector<T>(num_coordinates_) {
    this->set_angular_rate(0.0);
    this->set_acceleration(0.0);
  }

  AngularRateAccelerationCommand<T>* DoClone() const final { return new AngularRateAccelerationCommand; }

  /// @name Getters and Setters
  //@{
  /// The desired angular rate; positive results in the vehicle turning left.
  /// @note @c angular_rate is expressed in units of rad/s.
  const T& angular_rate() const {
    ThrowIfEmpty();
    return this->GetAtIndex(index_angular_rate_);
  }
  // Setter that matches angular_rate().
  void set_angular_rate(const T& angular_rate) {
    ThrowIfEmpty();
    this->SetAtIndex(index_angular_rate_, angular_rate);
  }
  /// The signed acceleration, positive means speed up; negative means slow
  /// down, but should not move in reverse.
  /// @note @c acceleration is expressed in units of m/s^2.
  const T& acceleration() const {
    ThrowIfEmpty();
    return this->GetAtIndex(index_acceleration_);
  }
  // Setter that matches acceleration().
  void set_acceleration(const T& acceleration) {
    ThrowIfEmpty();
    this->SetAtIndex(index_acceleration_, acceleration);
  }

  // Getters for the intrinsics of this vector.
  static int num_coordinates() { return num_coordinates_; }
  static int index_angular_rate() { return index_angular_rate_; }
  static int index_acceleration() { return index_acceleration_; }
  //@}

  /// Returns a vector containing the names of each coordinate within this
  /// class. The indices within the returned vector matches that of this class.
  /// In other words, `GetCoordinateNames()[i]` is the name for `BasicVector::GetAtIndex(i)`.
  static const std::vector<std::string>& GetCoordinateNames() {
    static const maliput::common::never_destroyed<std::vector<std::string>> coordinates(std::vector<std::string>{
        "angular_rate",  // BR
        "acceleration",  // BR
    });
    return coordinates.access();
  }

  /// Returns whether the current values of this vector are well-formed.
  bool IsValid() const {
    using std::isnan;
    bool result{true};
    result = result && !isnan(angular_rate());
    result = result && !isnan(acceleration());
    return result;
  }

 private:
  void ThrowIfEmpty() const {
    if (this->values().size() == 0) {
      throw std::out_of_range(
          "The AngularRateAccelerationCommand vector has been moved-from; "
          "accessor methods may no longer be used");
    }
  }

  /// The total number of rows (coordinates).
  static const int num_coordinates_{2};

  // The index of each individual coordinate.
  static const int index_angular_rate_{0};
  static const int index_acceleration_{1};
};

}  // namespace delphyne
