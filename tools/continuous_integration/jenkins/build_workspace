#!/bin/bash

set -eo pipefail

# We want to build up a workspace similar to the one that is recommended at
# https://github.com/ToyotaResearchInstitute/delphyne-gui/blob/master/README.md
# The workspace we use here will necessarily look a little different from the
# one recommended for development based on the way Jenkins is configured.  In
# particular, the README.md recommends a workspace that looks like this:
#
#  delphyne_ws/
#      build
#          delphyne
#          drake
#          ign_cmake
#          ign_common
#          ...
#      install
#          include
#          lib
#          ...
#      src
#          delphyne
#              backend
#              ...
#          drake
#          ign_cmake
#          ign_common
#          ...
#

# We need to checkout dsim-repos-index to get access to the delphyne.repos file
# to get all of our dependencies. However, this is a private repository so we
# need the ssh keys from TRI to access this.  The below code fetches the ssh
# keys from an S3 bucket that TRI has, and is a bash version of the code located
# at: https://github.com/RobotLocomotion/drake-ci/blob/master/driver/configurations/aws.cmake
# and: https://github.com/RobotLocomotion/drake-ci/blob/master/tools/git_ssh.bash.in

SSH_IDENTITY_FILE=$( mktemp /tmp/id_rsa_XXXXXXXX )
aws s3 cp s3://drake-provisioning/id_rsa "$SSH_IDENTITY_FILE"
SSH_IDENTITY_SHA1=$( sha1sum "$SSH_IDENTITY_FILE" | cut -d' ' -f1 )
test "$SSH_IDENTITY_SHA1" = "8de7f79df9eb18344cf0e030d2ae3b658d81263b"
chmod 0400 "$SSH_IDENTITY_FILE"
GIT_SSH_FILE=$( mktemp /tmp/git_ssh_XXXXXXXX )
cat > $GIT_SSH_FILE <<EOF
ssh -i "$SSH_IDENTITY_FILE" -o StrictHostKeyChecking=no "\$@"
EOF
chmod 0755 $GIT_SSH_FILE
export GIT_SSH=$GIT_SSH_FILE
git clone -b 'bmarchi/add_delphyne_repos' git@github.com:ToyotaResearchInstitute/dsim-repos-index.git index

mkdir -p src
# TODO(hidmic): remove force after pipeline relocation.
vcs import --force src < index/delphyne-ci.repos

unset GIT_SSH
rm -f "$GIT_SSH_FILE"
rm -f "$SSH_IDENTITY_FILE"

if [ "$CHANGE_BRANCH" != "" ]; then
    echo "**** Checking out custom branch $CHANGE_BRANCH ****"
    vcs custom --args checkout "$CHANGE_BRANCH" src || true
else
    echo "**** Using default branches ****"
fi

