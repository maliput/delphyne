#!/bin/bash

set -euo pipefail

# The setup_early script installs just the necessary bootstrap dependencies to
# be able to build the workspace.  All other dependencies will be installed
# during setup_late.

export DEBIAN_FRONTEND='noninteractive'

# We've seen the "default" keyserver (p80.pool.sks-keyservers.net) fail somewhat
# often.  This function will try the default, followed by some alternates to
# reduce the number of times builds fail because of key problems.
get_key() {
    success=0
    for keyserver in hkp://p80.pool.sks-keyservers.net:80 hkp://pgp.mit.edu:80 hkp://keyserver.ubuntu.com:80 ; do
        sudo apt-key adv --keyserver $keyserver --recv-keys $1 || continue
        success=1
        break
    done

    if [ $success -eq 0 ]; then
        exit 1
    fi
}

# Install the direct delphyne dependencies.
sudo sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable bionic main" > /etc/apt/sources.list.d/gazebo-stable.list'
get_key D2486D2DD83DB69272AFE98867170598AF249743
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
get_key 421C365BD9FF1F717815A3895523BAEEB01FA116
sudo apt-get update -qq
sudo apt-get install -y --no-install-recommends $(tr '\n' ' ' <<EOF
awscli
curl
git
libignition-gui0-dev
libignition-rendering0-dev
libignition-common2-dev
libignition-tools-dev
libignition-cmake1-dev
libignition-math5-dev
libignition-transport5-dev
mercurial
pkg-config
pycodestyle
pylint3
python3-vcstool
python3-colcon-common-extensions
EOF
)

# The latest available drake nightly is downloaded and installed.

url_exists () {
    echo Testing URL: $1
    # Sends an http request against the test URL, will return false if whether the
    # request specifically fails or if it takes more than 5 seconds to respond.
    if curl --output /dev/null --silent --head --max-time 5 --fail "$1"; then
        return 0
    fi
    return 1
}

TEMPLATE_RELEASE_URL="https://drake-packages.csail.mit.edu/drake/nightly/drake-YYYYMMDD-bionic.tar.gz"

RELEASE_DATE=$(date +%Y%m%d -d "yesterday")
RELEASE_URL="${TEMPLATE_RELEASE_URL//YYYYMMDD/$RELEASE_DATE}"
if ! url_exists $RELEASE_URL; then
    # In case the initial URL for downloading the binary is not valid,
    # the script will attempt to generate new ones based on the dates of up
    # to 5 days after the commit date.
    NUM_ATTEMPTS=1
    while ! url_exists $RELEASE_URL; do
      if [ "$NUM_ATTEMPTS" -le "5" ] ; then
        # Adds one day to the current date to test.
        RELEASE_DATE=$(date +%Y%m%d -d "$RELEASE_DATE - 1 day")
        # Updates binary's URL with new date.
        RELEASE_URL="${TEMPLATE_RELEASE_URL//YYYYMMDD/$RELEASE_DATE}"
      # If couldn't find a valid URL between the tested dates, fails.
      else
        echo "ERROR: Couldn't find a valid URL to download drake binaries."
        exit 1
      fi
      NUM_ATTEMPTS=$((NUM_ATTEMPTS+1))
    done
fi

# Downloads drake binary and untars it into the install directory.
curl $RELEASE_URL | sudo tar xvz -C /opt
