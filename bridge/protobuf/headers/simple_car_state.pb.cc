// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple_car_state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "simple_car_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* SimpleCarState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleCarState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_simple_5fcar_5fstate_2eproto() {
  protobuf_AddDesc_simple_5fcar_5fstate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "simple_car_state.proto");
  GOOGLE_CHECK(file != NULL);
  SimpleCarState_descriptor_ = file->message_type(0);
  static const int SimpleCarState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleCarState, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleCarState, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleCarState, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleCarState, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleCarState, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleCarState, velocity_),
  };
  SimpleCarState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleCarState_descriptor_,
      SimpleCarState::default_instance_,
      SimpleCarState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleCarState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleCarState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleCarState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_simple_5fcar_5fstate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleCarState_descriptor_, &SimpleCarState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_simple_5fcar_5fstate_2eproto() {
  delete SimpleCarState::default_instance_;
  delete SimpleCarState_reflection_;
}

void protobuf_AddDesc_simple_5fcar_5fstate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ignition::msgs::protobuf_AddDesc_ignition_2fmsgs_2fheader_2eproto();
  ::ignition::msgs::protobuf_AddDesc_ignition_2fmsgs_2ftime_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026simple_car_state.proto\022\rignition.msgs\032"
    "\032ignition/msgs/header.proto\032\030ignition/ms"
    "gs/time.proto\"\223\001\n\016SimpleCarState\022%\n\006head"
    "er\030\001 \001(\0132\025.ignition.msgs.Header\022!\n\004time\030"
    "\002 \001(\0132\023.ignition.msgs.Time\022\t\n\001x\030\003 \001(\001\022\t\n"
    "\001y\030\004 \001(\001\022\017\n\007heading\030\005 \001(\001\022\020\n\010velocity\030\006 "
    "\001(\001B)\n\021com.ignition.msgsB\024SimpleCarState"
    "Protos", 286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "simple_car_state.proto", &protobuf_RegisterTypes);
  SimpleCarState::default_instance_ = new SimpleCarState();
  SimpleCarState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_simple_5fcar_5fstate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_simple_5fcar_5fstate_2eproto {
  StaticDescriptorInitializer_simple_5fcar_5fstate_2eproto() {
    protobuf_AddDesc_simple_5fcar_5fstate_2eproto();
  }
} static_descriptor_initializer_simple_5fcar_5fstate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SimpleCarState::kHeaderFieldNumber;
const int SimpleCarState::kTimeFieldNumber;
const int SimpleCarState::kXFieldNumber;
const int SimpleCarState::kYFieldNumber;
const int SimpleCarState::kHeadingFieldNumber;
const int SimpleCarState::kVelocityFieldNumber;
#endif  // !_MSC_VER

SimpleCarState::SimpleCarState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ignition.msgs.SimpleCarState)
}

void SimpleCarState::InitAsDefaultInstance() {
  header_ = const_cast< ::ignition::msgs::Header*>(&::ignition::msgs::Header::default_instance());
  time_ = const_cast< ::ignition::msgs::Time*>(&::ignition::msgs::Time::default_instance());
}

SimpleCarState::SimpleCarState(const SimpleCarState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ignition.msgs.SimpleCarState)
}

void SimpleCarState::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  time_ = NULL;
  x_ = 0;
  y_ = 0;
  heading_ = 0;
  velocity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleCarState::~SimpleCarState() {
  // @@protoc_insertion_point(destructor:ignition.msgs.SimpleCarState)
  SharedDtor();
}

void SimpleCarState::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete time_;
  }
}

void SimpleCarState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleCarState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleCarState_descriptor_;
}

const SimpleCarState& SimpleCarState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simple_5fcar_5fstate_2eproto();
  return *default_instance_;
}

SimpleCarState* SimpleCarState::default_instance_ = NULL;

SimpleCarState* SimpleCarState::New() const {
  return new SimpleCarState;
}

void SimpleCarState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SimpleCarState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(x_, velocity_);
    if (has_header()) {
      if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
    }
    if (has_time()) {
      if (time_ != NULL) time_->::ignition::msgs::Time::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleCarState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ignition.msgs.SimpleCarState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ignition.msgs.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional .ignition.msgs.Time time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }

      // optional double x = 3;
      case 3: {
        if (tag == 25) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }

      // optional double y = 4;
      case 4: {
        if (tag == 33) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_heading;
        break;
      }

      // optional double heading = 5;
      case 5: {
        if (tag == 41) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_velocity;
        break;
      }

      // optional double velocity = 6;
      case 6: {
        if (tag == 49) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ignition.msgs.SimpleCarState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ignition.msgs.SimpleCarState)
  return false;
#undef DO_
}

void SimpleCarState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ignition.msgs.SimpleCarState)
  // optional .ignition.msgs.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .ignition.msgs.Time time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->time(), output);
  }

  // optional double x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // optional double y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // optional double heading = 5;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // optional double velocity = 6;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->velocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ignition.msgs.SimpleCarState)
}

::google::protobuf::uint8* SimpleCarState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ignition.msgs.SimpleCarState)
  // optional .ignition.msgs.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .ignition.msgs.Time time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->time(), target);
  }

  // optional double x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // optional double y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // optional double heading = 5;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // optional double velocity = 6;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->velocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ignition.msgs.SimpleCarState)
  return target;
}

int SimpleCarState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ignition.msgs.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .ignition.msgs.Time time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // optional double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double heading = 5;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double velocity = 6;
    if (has_velocity()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleCarState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleCarState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleCarState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleCarState::MergeFrom(const SimpleCarState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ignition::msgs::Header::MergeFrom(from.header());
    }
    if (from.has_time()) {
      mutable_time()->::ignition::msgs::Time::MergeFrom(from.time());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleCarState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleCarState::CopyFrom(const SimpleCarState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleCarState::IsInitialized() const {

  return true;
}

void SimpleCarState::Swap(SimpleCarState* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(time_, other->time_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(heading_, other->heading_);
    std::swap(velocity_, other->velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleCarState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleCarState_descriptor_;
  metadata.reflection = SimpleCarState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

// @@protoc_insertion_point(global_scope)
