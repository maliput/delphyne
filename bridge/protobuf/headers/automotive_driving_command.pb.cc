// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: automotive_driving_command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "automotive_driving_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* AutomotiveDrivingCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutomotiveDrivingCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_automotive_5fdriving_5fcommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_automotive_5fdriving_5fcommand_2eproto() {
  protobuf_AddDesc_automotive_5fdriving_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "automotive_driving_command.proto");
  GOOGLE_CHECK(file != NULL);
  AutomotiveDrivingCommand_descriptor_ = file->message_type(0);
  static const int AutomotiveDrivingCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomotiveDrivingCommand, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomotiveDrivingCommand, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomotiveDrivingCommand, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomotiveDrivingCommand, theta_),
  };
  AutomotiveDrivingCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AutomotiveDrivingCommand_descriptor_,
      AutomotiveDrivingCommand::default_instance_,
      AutomotiveDrivingCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomotiveDrivingCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(AutomotiveDrivingCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomotiveDrivingCommand, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_automotive_5fdriving_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AutomotiveDrivingCommand_descriptor_, &AutomotiveDrivingCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_automotive_5fdriving_5fcommand_2eproto() {
  delete AutomotiveDrivingCommand::default_instance_;
  delete AutomotiveDrivingCommand_reflection_;
}

void protobuf_AddDesc_automotive_5fdriving_5fcommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_automotive_5fdriving_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ignition::msgs::protobuf_AddDesc_ignition_2fmsgs_2fheader_2eproto();
  ::ignition::msgs::protobuf_AddDesc_ignition_2fmsgs_2ftime_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n automotive_driving_command.proto\022\rigni"
    "tion.msgs\032\032ignition/msgs/header.proto\032\030i"
    "gnition/msgs/time.proto\"\217\001\n\030AutomotiveDr"
    "ivingCommand\022%\n\006header\030\001 \001(\0132\025.ignition."
    "msgs.Header\022!\n\004time\030\002 \001(\0132\023.ignition.msg"
    "s.Time\022\027\n\014acceleration\030\003 \001(\001:\0010\022\020\n\005theta"
    "\030\004 \001(\001:\0010B3\n\021com.ignition.msgsB\036Automoti"
    "veDrivingCommandProtos", 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "automotive_driving_command.proto", &protobuf_RegisterTypes);
  AutomotiveDrivingCommand::default_instance_ = new AutomotiveDrivingCommand();
  AutomotiveDrivingCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_automotive_5fdriving_5fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_automotive_5fdriving_5fcommand_2eproto {
  StaticDescriptorInitializer_automotive_5fdriving_5fcommand_2eproto() {
    protobuf_AddDesc_automotive_5fdriving_5fcommand_2eproto();
  }
} static_descriptor_initializer_automotive_5fdriving_5fcommand_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutomotiveDrivingCommand::kHeaderFieldNumber;
const int AutomotiveDrivingCommand::kTimeFieldNumber;
const int AutomotiveDrivingCommand::kAccelerationFieldNumber;
const int AutomotiveDrivingCommand::kThetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutomotiveDrivingCommand::AutomotiveDrivingCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ignition.msgs.AutomotiveDrivingCommand)
}

void AutomotiveDrivingCommand::InitAsDefaultInstance() {
  header_ = const_cast< ::ignition::msgs::Header*>(&::ignition::msgs::Header::default_instance());
  time_ = const_cast< ::ignition::msgs::Time*>(&::ignition::msgs::Time::default_instance());
}

AutomotiveDrivingCommand::AutomotiveDrivingCommand(const AutomotiveDrivingCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ignition.msgs.AutomotiveDrivingCommand)
}

void AutomotiveDrivingCommand::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  time_ = NULL;
  acceleration_ = 0;
  theta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutomotiveDrivingCommand::~AutomotiveDrivingCommand() {
  // @@protoc_insertion_point(destructor:ignition.msgs.AutomotiveDrivingCommand)
  SharedDtor();
}

void AutomotiveDrivingCommand::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete time_;
  }
}

void AutomotiveDrivingCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutomotiveDrivingCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutomotiveDrivingCommand_descriptor_;
}

const AutomotiveDrivingCommand& AutomotiveDrivingCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_automotive_5fdriving_5fcommand_2eproto();
  return *default_instance_;
}

AutomotiveDrivingCommand* AutomotiveDrivingCommand::default_instance_ = NULL;

AutomotiveDrivingCommand* AutomotiveDrivingCommand::New(::google::protobuf::Arena* arena) const {
  AutomotiveDrivingCommand* n = new AutomotiveDrivingCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutomotiveDrivingCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ignition.msgs.AutomotiveDrivingCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AutomotiveDrivingCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AutomotiveDrivingCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(acceleration_, theta_);
    if (has_header()) {
      if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
    }
    if (has_time()) {
      if (time_ != NULL) time_->::ignition::msgs::Time::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AutomotiveDrivingCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ignition.msgs.AutomotiveDrivingCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ignition.msgs.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional .ignition.msgs.Time time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_acceleration;
        break;
      }

      // optional double acceleration = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
          set_has_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_theta;
        break;
      }

      // optional double theta = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ignition.msgs.AutomotiveDrivingCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ignition.msgs.AutomotiveDrivingCommand)
  return false;
#undef DO_
}

void AutomotiveDrivingCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ignition.msgs.AutomotiveDrivingCommand)
  // optional .ignition.msgs.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .ignition.msgs.Time time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_, output);
  }

  // optional double acceleration = 3 [default = 0];
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->acceleration(), output);
  }

  // optional double theta = 4 [default = 0];
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ignition.msgs.AutomotiveDrivingCommand)
}

::google::protobuf::uint8* AutomotiveDrivingCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ignition.msgs.AutomotiveDrivingCommand)
  // optional .ignition.msgs.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .ignition.msgs.Time time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->time_, false, target);
  }

  // optional double acceleration = 3 [default = 0];
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->acceleration(), target);
  }

  // optional double theta = 4 [default = 0];
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ignition.msgs.AutomotiveDrivingCommand)
  return target;
}

int AutomotiveDrivingCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ignition.msgs.AutomotiveDrivingCommand)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .ignition.msgs.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .ignition.msgs.Time time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_);
    }

    // optional double acceleration = 3 [default = 0];
    if (has_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double theta = 4 [default = 0];
    if (has_theta()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutomotiveDrivingCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ignition.msgs.AutomotiveDrivingCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AutomotiveDrivingCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AutomotiveDrivingCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ignition.msgs.AutomotiveDrivingCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ignition.msgs.AutomotiveDrivingCommand)
    MergeFrom(*source);
  }
}

void AutomotiveDrivingCommand::MergeFrom(const AutomotiveDrivingCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ignition.msgs.AutomotiveDrivingCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ignition::msgs::Header::MergeFrom(from.header());
    }
    if (from.has_time()) {
      mutable_time()->::ignition::msgs::Time::MergeFrom(from.time());
    }
    if (from.has_acceleration()) {
      set_acceleration(from.acceleration());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AutomotiveDrivingCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ignition.msgs.AutomotiveDrivingCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomotiveDrivingCommand::CopyFrom(const AutomotiveDrivingCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ignition.msgs.AutomotiveDrivingCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomotiveDrivingCommand::IsInitialized() const {

  return true;
}

void AutomotiveDrivingCommand::Swap(AutomotiveDrivingCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutomotiveDrivingCommand::InternalSwap(AutomotiveDrivingCommand* other) {
  std::swap(header_, other->header_);
  std::swap(time_, other->time_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(theta_, other->theta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutomotiveDrivingCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutomotiveDrivingCommand_descriptor_;
  metadata.reflection = AutomotiveDrivingCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutomotiveDrivingCommand

// optional .ignition.msgs.Header header = 1;
bool AutomotiveDrivingCommand::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutomotiveDrivingCommand::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void AutomotiveDrivingCommand::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutomotiveDrivingCommand::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
const ::ignition::msgs::Header& AutomotiveDrivingCommand::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.AutomotiveDrivingCommand.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::ignition::msgs::Header* AutomotiveDrivingCommand::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.AutomotiveDrivingCommand.header)
  return header_;
}
::ignition::msgs::Header* AutomotiveDrivingCommand::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.AutomotiveDrivingCommand.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void AutomotiveDrivingCommand::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.AutomotiveDrivingCommand.header)
}

// optional .ignition.msgs.Time time = 2;
bool AutomotiveDrivingCommand::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutomotiveDrivingCommand::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void AutomotiveDrivingCommand::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutomotiveDrivingCommand::clear_time() {
  if (time_ != NULL) time_->::ignition::msgs::Time::Clear();
  clear_has_time();
}
const ::ignition::msgs::Time& AutomotiveDrivingCommand::time() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.AutomotiveDrivingCommand.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
::ignition::msgs::Time* AutomotiveDrivingCommand::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.AutomotiveDrivingCommand.time)
  return time_;
}
::ignition::msgs::Time* AutomotiveDrivingCommand::release_time() {
  // @@protoc_insertion_point(field_release:ignition.msgs.AutomotiveDrivingCommand.time)
  clear_has_time();
  ::ignition::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
void AutomotiveDrivingCommand::set_allocated_time(::ignition::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.AutomotiveDrivingCommand.time)
}

// optional double acceleration = 3 [default = 0];
bool AutomotiveDrivingCommand::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AutomotiveDrivingCommand::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
void AutomotiveDrivingCommand::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
void AutomotiveDrivingCommand::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
 double AutomotiveDrivingCommand::acceleration() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.AutomotiveDrivingCommand.acceleration)
  return acceleration_;
}
 void AutomotiveDrivingCommand::set_acceleration(double value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.AutomotiveDrivingCommand.acceleration)
}

// optional double theta = 4 [default = 0];
bool AutomotiveDrivingCommand::has_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AutomotiveDrivingCommand::set_has_theta() {
  _has_bits_[0] |= 0x00000008u;
}
void AutomotiveDrivingCommand::clear_has_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
void AutomotiveDrivingCommand::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
 double AutomotiveDrivingCommand::theta() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.AutomotiveDrivingCommand.theta)
  return theta_;
}
 void AutomotiveDrivingCommand::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.AutomotiveDrivingCommand.theta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

// @@protoc_insertion_point(global_scope)
