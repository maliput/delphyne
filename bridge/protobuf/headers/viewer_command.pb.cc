// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: viewer_command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "viewer_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* ViewerCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewerCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ViewerCommand_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_viewer_5fcommand_2eproto() {
  protobuf_AddDesc_viewer_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "viewer_command.proto");
  GOOGLE_CHECK(file != NULL);
  ViewerCommand_descriptor_ = file->message_type(0);
  static const int ViewerCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewerCommand, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewerCommand, command_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewerCommand, command_data_),
  };
  ViewerCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewerCommand_descriptor_,
      ViewerCommand::default_instance_,
      ViewerCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewerCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewerCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewerCommand));
  ViewerCommand_Type_descriptor_ = ViewerCommand_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_viewer_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewerCommand_descriptor_, &ViewerCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_viewer_5fcommand_2eproto() {
  delete ViewerCommand::default_instance_;
  delete ViewerCommand_reflection_;
}

void protobuf_AddDesc_viewer_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ignition::msgs::protobuf_AddDesc_ignition_2fmsgs_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024viewer_command.proto\022\rignition.msgs\032\032i"
    "gnition/msgs/header.proto\"\376\001\n\rViewerComm"
    "and\022%\n\006header\030\001 \001(\0132\025.ignition.msgs.Head"
    "er\022\024\n\014command_type\030\002 \001(\005\022\024\n\014command_data"
    "\030\003 \001(\t\"\231\001\n\004Type\022\n\n\006STATUS\020\000\022\016\n\nLOAD_MODE"
    "L\020\001\022\021\n\rLOAD_RENDERER\020\002\022\014\n\010SHUTDOWN\020\003\022\023\n\017"
    "START_RECORDING\020\004\022\022\n\016STOP_RECORDING\020\005\022\020\n"
    "\014LOAD_TERRAIN\020\006\022\031\n\025SET_TERRAIN_TRANSFORM"
    "\020\007B)\n\021com.ignition.msgsB\024SimpleCarStateP"
    "rotos", 365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "viewer_command.proto", &protobuf_RegisterTypes);
  ViewerCommand::default_instance_ = new ViewerCommand();
  ViewerCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_viewer_5fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_viewer_5fcommand_2eproto {
  StaticDescriptorInitializer_viewer_5fcommand_2eproto() {
    protobuf_AddDesc_viewer_5fcommand_2eproto();
  }
} static_descriptor_initializer_viewer_5fcommand_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ViewerCommand_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewerCommand_Type_descriptor_;
}
bool ViewerCommand_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ViewerCommand_Type ViewerCommand::STATUS;
const ViewerCommand_Type ViewerCommand::LOAD_MODEL;
const ViewerCommand_Type ViewerCommand::LOAD_RENDERER;
const ViewerCommand_Type ViewerCommand::SHUTDOWN;
const ViewerCommand_Type ViewerCommand::START_RECORDING;
const ViewerCommand_Type ViewerCommand::STOP_RECORDING;
const ViewerCommand_Type ViewerCommand::LOAD_TERRAIN;
const ViewerCommand_Type ViewerCommand::SET_TERRAIN_TRANSFORM;
const ViewerCommand_Type ViewerCommand::Type_MIN;
const ViewerCommand_Type ViewerCommand::Type_MAX;
const int ViewerCommand::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ViewerCommand::kHeaderFieldNumber;
const int ViewerCommand::kCommandTypeFieldNumber;
const int ViewerCommand::kCommandDataFieldNumber;
#endif  // !_MSC_VER

ViewerCommand::ViewerCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ignition.msgs.ViewerCommand)
}

void ViewerCommand::InitAsDefaultInstance() {
  header_ = const_cast< ::ignition::msgs::Header*>(&::ignition::msgs::Header::default_instance());
}

ViewerCommand::ViewerCommand(const ViewerCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ignition.msgs.ViewerCommand)
}

void ViewerCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  command_type_ = 0;
  command_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewerCommand::~ViewerCommand() {
  // @@protoc_insertion_point(destructor:ignition.msgs.ViewerCommand)
  SharedDtor();
}

void ViewerCommand::SharedDtor() {
  if (command_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_data_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void ViewerCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewerCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewerCommand_descriptor_;
}

const ViewerCommand& ViewerCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_viewer_5fcommand_2eproto();
  return *default_instance_;
}

ViewerCommand* ViewerCommand::default_instance_ = NULL;

ViewerCommand* ViewerCommand::New() const {
  return new ViewerCommand;
}

void ViewerCommand::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_header()) {
      if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
    }
    command_type_ = 0;
    if (has_command_data()) {
      if (command_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        command_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViewerCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ignition.msgs.ViewerCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ignition.msgs.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_command_type;
        break;
      }

      // optional int32 command_type = 2;
      case 2: {
        if (tag == 16) {
         parse_command_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_type_)));
          set_has_command_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_command_data;
        break;
      }

      // optional string command_data = 3;
      case 3: {
        if (tag == 26) {
         parse_command_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command_data().data(), this->command_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ignition.msgs.ViewerCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ignition.msgs.ViewerCommand)
  return false;
#undef DO_
}

void ViewerCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ignition.msgs.ViewerCommand)
  // optional .ignition.msgs.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional int32 command_type = 2;
  if (has_command_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->command_type(), output);
  }

  // optional string command_data = 3;
  if (has_command_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_data().data(), this->command_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->command_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ignition.msgs.ViewerCommand)
}

::google::protobuf::uint8* ViewerCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ignition.msgs.ViewerCommand)
  // optional .ignition.msgs.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional int32 command_type = 2;
  if (has_command_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->command_type(), target);
  }

  // optional string command_data = 3;
  if (has_command_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_data().data(), this->command_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->command_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ignition.msgs.ViewerCommand)
  return target;
}

int ViewerCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ignition.msgs.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional int32 command_type = 2;
    if (has_command_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command_type());
    }

    // optional string command_data = 3;
    if (has_command_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewerCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewerCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewerCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViewerCommand::MergeFrom(const ViewerCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ignition::msgs::Header::MergeFrom(from.header());
    }
    if (from.has_command_type()) {
      set_command_type(from.command_type());
    }
    if (from.has_command_data()) {
      set_command_data(from.command_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViewerCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewerCommand::CopyFrom(const ViewerCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewerCommand::IsInitialized() const {

  return true;
}

void ViewerCommand::Swap(ViewerCommand* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(command_type_, other->command_type_);
    std::swap(command_data_, other->command_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViewerCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewerCommand_descriptor_;
  metadata.reflection = ViewerCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

// @@protoc_insertion_point(global_scope)
